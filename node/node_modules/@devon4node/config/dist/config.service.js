"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var ConfigService_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigService = void 0;
const common_1 = require("@nestjs/common");
const class_transformer_1 = require("class-transformer");
const class_validator_1 = require("class-validator");
const _ = require("lodash");
const path_1 = require("path");
const config_constants_1 = require("./config.constants");
let ConfigService = ConfigService_1 = class ConfigService {
    constructor(configModuleOptions, _values) {
        this.configModuleOptions = configModuleOptions;
        this._values = _values;
        this.loadConfig();
        if (configModuleOptions.validate()) {
            this.validateValues();
        }
    }
    static async loadConfigFromFile(configDir) {
        let filePath = path_1.join(configDir || process.cwd(), ConfigService_1.configFile());
        if (!path_1.isAbsolute(filePath)) {
            filePath = path_1.join(process.cwd(), filePath);
        }
        const config = await Promise.resolve().then(() => require(filePath));
        return Object.assign({}, config.default);
    }
    loadConfig() {
        Object.keys(process.env)
            .filter(e => e.startsWith(this.configModuleOptions.configPrefix + config_constants_1.PREFIX_SEPARATOR) && process.env[e])
            .forEach(e => {
            const key = this.removePrefix(e);
            let newValue = process.env[e];
            const actualValue = _.get(this._values, key);
            try {
                newValue = JSON.parse(process.env[e]);
            }
            catch (_a) {
            }
            if (!_.isPlainObject(newValue) || !_.isPlainObject(actualValue)) {
                _.set(this._values, key, newValue);
            }
            else {
                _.set(this._values, key, _.defaultsDeep(newValue, actualValue));
            }
        });
    }
    removePrefix(key) {
        return key.substr(this.configModuleOptions.configPrefix.length + config_constants_1.PREFIX_SEPARATOR.length);
    }
    validateValues() {
        const validationErrors = class_validator_1.validateSync(class_transformer_1.plainToClass(this.configModuleOptions.configType, this._values));
        if (validationErrors.length) {
            throw new Error(JSON.stringify(validationErrors));
        }
    }
    get values() {
        return this._values;
    }
};
ConfigService.configFile = () => process.env.NODE_ENV || 'default';
ConfigService = ConfigService_1 = __decorate([
    common_1.Injectable(),
    __param(0, common_1.Inject(config_constants_1.CONFIG_OPTIONS_PROVIDER_NAME)),
    __param(1, common_1.Inject(config_constants_1.CONFIG_VALUES_PROVIDER_NAME)),
    __metadata("design:paramtypes", [Object, Object])
], ConfigService);
exports.ConfigService = ConfigService;
