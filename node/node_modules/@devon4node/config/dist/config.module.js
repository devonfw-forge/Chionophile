"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ConfigModule_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigModule = void 0;
const common_1 = require("@nestjs/common");
const config_constants_1 = require("./config.constants");
const config_service_1 = require("./config.service");
const base_config_1 = require("./base-config");
let ConfigModule = ConfigModule_1 = class ConfigModule {
    static getValidate() {
        return !process.env.VALIDATE_CONFIG ||
            process.env.VALIDATE_CONFIG.toLowerCase() === 'false' ||
            process.env.VALIDATE_CONFIG.toLowerCase() === 'no'
            ? false
            : true;
    }
    static forRoot(options) {
        const mergedOptions = Object.assign(Object.assign({}, this.defaultOptions), options);
        return {
            module: ConfigModule_1,
            providers: [
                {
                    provide: config_constants_1.CONFIG_OPTIONS_PROVIDER_NAME,
                    useValue: mergedOptions,
                },
                {
                    provide: config_constants_1.CONFIG_VALUES_PROVIDER_NAME,
                    useFactory: async () => {
                        return await config_service_1.ConfigService.loadConfigFromFile(mergedOptions.configDir);
                    },
                },
                config_service_1.ConfigService,
            ],
            exports: [config_service_1.ConfigService],
        };
    }
};
ConfigModule.defaultOptions = {
    configDir: './dist/config',
    configPrefix: 'devon4node',
    validate: ConfigModule_1.getValidate,
    configType: base_config_1.BaseConfig,
};
ConfigModule = ConfigModule_1 = __decorate([
    common_1.Module({})
], ConfigModule);
exports.ConfigModule = ConfigModule;
