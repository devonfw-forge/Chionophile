import { Observable } from 'rxjs';
import { CallHandler, ExecutionContext, NestInterceptor } from '@nestjs/common';
import { ClassTransformOptions } from '@nestjs/common/interfaces/external/class-transform-options.interface';
interface IClassType<T> {
    new (...args: any[]): T;
}
declare type ClassType<T> = IClassType<T>;
export interface IPlainLiteralObject {
    [key: string]: any;
}
export declare class ClassSerializerInterceptor implements NestInterceptor {
    protected readonly reflector: any;
    constructor(reflector: any);
    intercept(context: ExecutionContext, next: CallHandler): Observable<any>;
    serialize(response: IPlainLiteralObject | IPlainLiteralObject[], options?: ClassTransformOptions, type?: ClassType<any>): IPlainLiteralObject | IPlainLiteralObject[];
    transformToPlain(plainOrClass: any, options?: ClassTransformOptions): IPlainLiteralObject;
    transformToClass(classType: ClassType<any>, plainOrClass: any, options?: ClassTransformOptions): any;
    private getContextOptions;
    private getType;
    private reflectSerializeMetadata;
}
export {};
