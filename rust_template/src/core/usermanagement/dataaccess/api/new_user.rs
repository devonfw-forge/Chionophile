use crate::api::common::dataaccess::api::new_entity::NewEntity;
use crate::core::general::database::schema::users;
use crate::core::usermanagement::logic::api::user_eto::UserEto;

/*
    The struct NewUser also relates to the users table in schema.rs. It's neeeded because in this
    case, the table ID is of type BIGSERIAL, which means it's autogenerated.
    This struct will only be used for creating users in our database.
    In a real environment, users should instead have an UUID or random ID, but because the approach
    to autogenerated IDs is different from other languages, this template will cover it.
*/
#[derive(Debug, Clone, Insertable)]
#[table_name="users"]
pub struct NewUser {
    pub username: Option<String>,
    pub name: Option<String>,
    pub password: Option<String>,
    pub phone_number: Option<String>,
    pub accepted_commercial: Option<bool>,
    pub accepted_terms: bool,
}

impl NewEntity<UserEto> for NewUser {}

impl From<UserEto> for NewUser {
    fn from(user_eto: UserEto) -> Self {
        NewUser {
            username: Some(user_eto.username),
            name: Some(user_eto.name),
            phone_number: Some(user_eto.phone_number),
            password: Some(user_eto.password),
            accepted_commercial: user_eto.accepted_commercial,
            accepted_terms: user_eto.accepted_terms,
        }
    }
}
